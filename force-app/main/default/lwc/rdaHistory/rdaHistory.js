import { LightningElement, track, wire } from 'lwc';
import getCasesByAccount from '@salesforce/apex/RDAController.getCasesByAccount';
import getAccount from '@salesforce/apex/RDAController.getAccount';
 // RT 08-10-24 defect changes
import userId from '@salesforce/user/Id';
import { getRecord } from 'lightning/uiRecordApi';
import userAccountField from '@salesforce/schema/User.AccountId';
import createReverseRDA from '@salesforce/apex/RDAController.createReverseRDA';
import getLatestCaseAndShippingTracking from '@salesforce/apex/RDAController.getLatestCaseAndShippingTracking';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { CurrentPageReference } from 'lightning/navigation';
// RT 04-10-24 changes - removed static resource file
export default class RdaHistory extends LightningElement {
    @track cases;
    @track error;   
    @track pageSize = 20;   
    @track pageNumber = 1;
    @track totalCases;
    @track remsId = '';
    @track startDate;
    @track accountId;
    @track account;
    @track endDate = new Date().toISOString().split('T')[0]; // Default end date is today
    @track sortBy = 'RDA_Authorization_Code_Date__c';
    @track sortDirection = 'desc';
    @track selectedRowKeys = [];    
    @track totalCasesCount;
    @track openRDAModel = false;
    @track isLoading = false;
    @track errorMessage = '';
    @track latestCase;
    @track shippingTrackingRecords;
    @track currentCaseId;
    @track accountCreatedDate;
    @track allCases;
    @track styleInjected = false;
    @track currentUser;
    @track totalCaseCountNo;
    @track selectedCode;// RT 10-11-24 Defect changes 
    columns = [
        { label: 'RDA Code', fieldName: 'RDA_Authorization_Code__c',sortable: true,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'RDA Outcome', fieldName: 'US_WSREMS__Outcome__c',initialWidth: 150,cellAttributes: { alignment: 'center' } },
        { label: 'Generated Date', fieldName: 'RDA_Authorization_Code_Date__c',sortable: true ,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label:'Generated By', fieldName: 'Pharmacy_Participant_Name',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Prescriber NPI', fieldName: 'Prescriber_NPI__c',sortable: true,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Prescriber Name', fieldName: 'Prescriber_Name',sortable: true,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Patient REMS ID', fieldName: 'SYN_Patient_REMS_ID_Number__c',sortable: true,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Patient Risk Category', fieldName: 'US_WSREMS__Patient_Risk_Category__c',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Counseling Recorded', fieldName: 'Counseling_Recorded__c',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Pregnancy Recorded', fieldName: 'Monthly_Pregnancy_Test_Recorded__c',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Manufacturer', fieldName: 'Manufacturer__c',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'NDC', fieldName: 'NDC_Code__c',sortable: true,initialWidth: 150,cellAttributes: { alignment: 'center' }},
        { label: 'Days Supply', fieldName: 'SYN_Days_Supply__c',initialWidth: 150,cellAttributes: { alignment: 'center' }},
        {   label: 'Action',
            type: 'button-icon',  
            initialWidth: 150,  
            typeAttributes: {   
                //RT 10-11-24 Defect changes Changed the title and alternativeText from 'Delete' to 'Reverse' to reflect the ction propperly
                iconName: 'utility:delete',
                title: 'Reverse',
                variant: 'bare',
                alternativeText: 'Reverse',
                class: { fieldName: 'deleteIconClass' },
            },
            cellAttributes: { alignment: 'center' },
        },
    ];

    @wire(CurrentPageReference)
    getPageReference(pageRef) {
        if (pageRef && pageRef.state) {
            // Retrieve accountId from URL
            this.accountId = pageRef.state.accountId;
            if(this.accountId){
                this.startDate = this.getDefaultStartDate();
                this.endDate = this.getDefaultEndDate();
                this.fetchAccount();
            }
        }
    }

    @wire(getRecord, {
        recordId: userId,
        fields: [userAccountField]
    }) wireuser({
        error,
        data
    }) {
        if (error) {
           this.error = error ; 
        } else if (data) {
            this.currentUser = { 'Id': userId, 'AccountId': data.fields.AccountId.value };
        }
    }
    // RT 04-10-24 changes
    renderedCallback() {
        if (!this.styleInjected) {
            this.applyCustomStyles();
            this.styleInjected = true; // Prevent re-injecting the styles on each render
        }
    }
   // RT 04-10-24 changes - used custom css to ovverride the table styling
    applyCustomStyles() {
        // Define your custom CSS as a string
        const customCSS = `
            .custom-datatable .slds-table tbody tr:nth-child(odd) {
                background-color: rgba(0, 0, 0, 0.05);
                height: 40px;
            }
            .custom-datatable .slds-table tbody tr:nth-child(even) {
                background-color: #ffffff;
                height: 40px;
            }
            .custom-datatable .slds-cell-fixed .slds-th__action {
                background-color: #011338;
                color: #fff;
                white-space: normal; 
                padding: 10px;
                border-right: none;
                text-transform: capitalize;
                cursor: default;
                font-size: 15px;
                justify-content: center;
            }
            .custom-datatable th {
                resize: none;
                width: auto;
                max-width: none;
                min-width: auto;
                overflow: visible; 
                border-right: none;
            }
            .custom-datatable .slds-table th,
            .custom-datatable .slds-table td {
                border-right: none; 
                white-space: normal; 
                overflow: visible; 
                text-overflow: clip; 
            }
            .table-top {
                background-color: rgb(84, 84, 84);
                color: #cac8c8;
                height:55px;
                display: flex;           
                justify-content: center;  
                align-items: center; 
            }
            .reverse-rda {
                background-color: #e4e5e5;
                border-top: 3px solid #a7b5cb;
                height: 40px;
            }
            .custom-icon {
                --slds-c-icon-color: #011338; 
                --sds-c-icon-color-foreground-default: #011338;
                fill: #011338;
            }
            .top {
                font-size: medium;
            }
            .custom-text {
                color: #011338;
                font-size: 12px;
                font-weight: bold;
                margin-top: 5px;
                margin-bottom: 0;
            }
            .page-info {
                color: #011338;
                font-weight: bold;
                font-size: 12px;
                margin: 0 10px;
            }
            .fw-bold{
                color: #011338;
                font-weight: 700 !important;
                margin-top: 1rem;
                margin-bottom: 1rem;
                font-weight:600; 
                font-size: 21px;
                }
                .placehold{
                    font-size: 16px;
                    
                }
                .col-11.ps-1{
                    margin-left: 19px;
                }
                .text-uppercase{
                color: #96BAB6;
                text-transform: uppercase !important;
                }
                .row .mb-1 .l-29{
                    color: #96BAB6;
                
                }
                .row .mb-1 .l-29 {
                    position: relative;
                    left: -29px;
                    font-size: 13px;
                }
                h1, h2, h3, h4, h5, h6 {
                    font-family: 'MyriadPro', arial !important;
                }
                .l-29 .fa-id-card-o {
                    font-size: 16px;
                    position: relative;
                    top: 2px;
                    left: 2px;
                }
                .col-1 .pe-0 .text-end{
                    flex: 0 0 auto;
                    width: 8.33333333%;
                    padding-right: 0 !important;
                    text-align: right !important;
                }
                .date-label {
                    margin-right: 10px;
                }
                .date-input {
                    margin-left: 5px; 
                    width: 150px;
                }
                .slds-input__icon_right {
                    top: 25%; 
                }
                .custom-input .slds-form-element__label {
                font-size: 15px; 
                color: #011338;
                font-weight:400; 
            }
            lightning-button.download-button button.slds-button.slds-button_neutral {
                background-color: #011338;
                color: white;
                border-radius: 0;
                width: 140px;
            
            }
            lightning-button.filter-button button.slds-button.slds-button_neutral {
                background-color: #011338;
                color: white;
                border-radius: 0; 
                width: 140px;
                
            }
            .no-help-text .slds-form-element__help {
                visibility: hidden;
            }
            .fa-phone {
                margin-right: 5px; 
                font-size: 20px; 
                color: #011338;
            }
            .fa-id-card{
                margin-right: 5px; 
                font-size: 20px; 
                color: #011338; 
            }
            .slds-form-element__control.slds-grow input.slds-input{
                background-color: #f1f1f1;
                border-radius: 0;
                border: 1px solid #ccc;
                width: 195px;
                margin-bottom: 20px;
            
                 max-width: 400px; 
            
            }
            .slds-form-element__control.slds-input-has-icon.slds-input-has-icon_right input.slds-input{
                background-color: #f1f1f1;
                border-radius: 0;
                border: 1px solid #ccc;
                width: 195px;
            }  
            .slds-dropdown-trigger.slds-dropdown-trigger_click.slds-size_1-of-1 label.slds-form-element__label{
            
                
                color: #011338; 
                font-size: 16px;
            }
            .slds-m-bottom_small.slds-size_5-of-11.pad label.slds-form-element__label.slds-no-flex{
            
                color: #011338;
                font-size: 16px;
            }
            .slds-card__body section.sec-one-1 {
                background-color: #fefefc;
                color: #000;
            }
            .slds-form-element__control.slds-input-has-icon.slds-input-has-icon_right lightning-primitive-icon{
            padding-left: 43px;
            padding-bottom: 7px;
            }
            .date-range lightning-input.custom-box::part(input) {
                padding-top: 6px;  
                padding-bottom: 2px; 
                line-height: normal; 
            }
            .slds-form-element__control.slds-input-has-icon.slds-input-has-icon_right .slds-button__icon{
            
                margin-bottom: 9px;
            }
            .filter-container{
                padding-bottom: 10px;
            }
            .d-flex.align-items-start .text-uppercase{
            
                margin-left: -6px;
            }
        `;
        const style = document.createElement('style');
        style.innerText = customCSS;
        this.template.querySelector('lightning-datatable').appendChild(style);
    }

    getDefaultStartDate() {
        let today = new Date();
        let defaultStartDate = new Date();
        defaultStartDate.setDate(today.getDate() - 30);
        return defaultStartDate.toISOString().split('T')[0];
    }
    
    getDefaultEndDate() {
        let today = new Date();
        return today.toISOString().split('T')[0]; 
    }

    handleRemsIdChange(event) {
        this.remsId = event.target.value;
    }

    handleStartDateChange(event) {
        this.startDate = event.target.value;
    }

    handleEndDateChange(event) {
        this.endDate = event.target.value;
    }

    handleFilter() {
        this.pageNumber = 1;
        this.fetchCases();
        this.getCaseCount();
    }

    fetchAccount(){
        if(this.accountId){
            this.isLoading = true;
            getAccount({accId:this.accountId})
            .then(result =>{
                this.isLoading = false; 
                this.account = result;
                this.accountCreatedDate = this.createdDateFormat(this.account?.CreatedDate);
                this.fetchCases(); // RT 09OCT24
                this.getCaseCount();
            })
            .catch(error => {
                this.isLoading = false; 
                this.error = error;
                this.account = undefined;
            })
        }
    }

    createdDateFormat(dateString) {
        const date = new Date(dateString);
        const month = date.getMonth() + 1;
        const day = date.getDate();
        const year = date.getFullYear();
        return `${month}/${day}/${year}`;
    }

    getCaseCount(){
        const params = {
            accountId: this.accountId,
            startDate: this.startDate,
            endDate: this.endDate,
            remsId: this.remsId,
            pageSize: this.totalCasesCount,
            pageNumber: null,
            sortBy: this.sortBy,
            sortDirection: this.sortDirection,
            isDownload : true
            
        };
        const paramJson = JSON.stringify(params);
        getCasesByAccount({ paramJson: paramJson })
            .then(data => { 
                this.totalCaseCountNo = data.length;
                console.log('caseCound da-->'+ this.totalCaseCountNo);

            })
            .catch(error => {
                this.totalCaseCountNo = 0;
            });
    }

    fetchCases() {
        this.errorMessage = '';
        // Validation: Start Date is required if End Date is provided, and vice versa
        if ((this.endDate && !this.startDate) || (this.startDate && !this.endDate)) {
            this.showError = true;
            this.errorMessage = 'Both Start Date and End Date are required.';
            this.showToast(
                "Error",
                this.errorMessage,
                "Error"
              );
            return;
        }
         // RT 08-10-24 defect changes
        if(this.accountId && this.currentUser){
            const params = {
                accountId: this.accountId,
                startDate: this.startDate,
                endDate: this.endDate,
                remsId: this.remsId,
                pageSize: this.pageSize,
                pageNumber: this.pageNumber,
                sortBy: this.sortBy,
                sortDirection: this.sortDirection,
                isDownload : false
                
            };
            const paremJsonData = JSON.stringify(params);
            this.cases = [];
            this.isLoading = true;
            getCasesByAccount({paramJson : paremJsonData})
            .then(data =>{
                this.isLoading = false;
                // RT 10-11-24 Defect changes Conditionally setting deleteIconClass to 'slds-hidden' if the case outcome is 'Reversed' hiding the delete icon for that 
                this.cases = data.map(caseRecord => ({
                    ...caseRecord,
                    Monthly_Pregnancy_Test_Recorded__c : caseRecord.Monthly_Pregnancy_Test_Recorded__c ? 'Yes' : 'No',
                    Counseling_Recorded__c : caseRecord.Counseling_Recorded__c ? 'Yes' : 'No',
                    RDA_Authorization_Code_Date__c : caseRecord.RDA_Authorization_Code_Date__c ? this.createdDateFormat(caseRecord.RDA_Authorization_Code_Date__c) : '',
                    Pharmacy_Participant_Name: caseRecord.Pharmacy_Participant__r ? caseRecord.Pharmacy_Participant__r.Name : '',
                    Prescriber_Name: caseRecord.SYN_Prescriber__r ? caseRecord.SYN_Prescriber__r.Name : '',
                    deleteIconClass : caseRecord.US_WSREMS__Outcome__c == 'Reversed' ? 'slds-hidden' : '',
                }));
                this.totalCasesCount = this.cases ? this.cases.length : 0;
            })
            .catch(error => {
                this.isLoading = false;
                this.error = error;
                this.cases = undefined;
                this.totalCasesCount = 0;
            })
    }
    }

    // Pagination controls
    handlePreviousPage() {
        if (this.pageNumber > 1) {
            this.pageNumber--;
            this.fetchCases();
        }
    }

    handleNextPage() {
        this.pageNumber++;
        this.fetchCases();
    }

    handleSort(event) {
        this.sortBy = event.detail.fieldName;
        this.sortDirection = event.detail.sortDirection;
        this.fetchCases(); 
    }

    get isPreviousDisabled() {
        return this.pageNumber === 1;
    }
    get isNextDisabled() {
        return this.cases && this.cases.length < this.pageSize; // Disable Next if fewer than pageSize records are returned
    }
   // Getter for total pages
   get totalPages() {
    return Math.ceil(this.totalCaseCountNo / this.pageSize);
}

// Getter for displaying "Page X of Y"
get pageInfo() {
    return `Page ${this.pageNumber} of ${this.totalPages}`;
}
// RT 08-10-24 defect changes
handleDownloadCSV() {
  // Retrieve all data based on filters without pagination
    const params = {
        accountId: this.accountId,
        startDate: this.startDate,
        endDate: this.endDate,
        remsId: this.remsId,
        pageSize: this.totalCasesCount,
        pageNumber: null,
        sortBy: this.sortBy,
        sortDirection: this.sortDirection,
        isDownload : true
        
    };
    const paramJsonData = JSON.stringify(params);
    getCasesByAccount({ paramJson: paramJsonData })
        .then(data => {
            let allCases = data?.map(caseRecord => ({
                ...caseRecord,
                Monthly_Pregnancy_Test_Recorded__c : caseRecord.Monthly_Pregnancy_Test_Recorded__c ? 'Yes' : 'No',
                Counseling_Recorded__c : caseRecord.Counseling_Recorded__c ? 'Yes' : 'No',
                Pharmacy_Participant_Name: caseRecord.Pharmacy_Participant__r ? caseRecord.Pharmacy_Participant__r.Name : '',
                Prescriber_Name: caseRecord.SYN_Prescriber__r ? caseRecord.SYN_Prescriber__r.Name : ''
            }));
            let csv = this.convertArrayOfObjectsToCSV(allCases, this.columns.filter(col => col.label !== 'Action'));
            if (csv == null) {
                this.showToast( "Error", 'CSV generation failed or no data available', "Error");
                return;
            }
            let fileName = `RDA History ${this.startDate} - ${this.endDate}.csv`;
            let hiddenElement = document.createElement('a');
            hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
            hiddenElement.target = '_self';
            hiddenElement.download = fileName;
            document.body.appendChild(hiddenElement);
            hiddenElement.click();
            document.body.removeChild(hiddenElement); // Clean up
        })
        .catch(error => {
            this.error = error;
            this.showToast( "Error", error.body.message, "Error" );
        });
}


 // Utility function to get a nested property value
 getNestedValue(obj, path) {
    if(path){
        return path.split('.').reduce((acc, part) => acc && acc[part], obj);
    }
}

convertArrayOfObjectsToCSV(data, columns) {
    if (!data || !data.length) {
        return null;
    }
    const columnDelimiter = ',';
    const lineDelimiter = '\n';

    // Extract column headers from columns array
    const headers = columns.map(col => col.label);
    let result = headers.join(columnDelimiter);
    result += lineDelimiter;
    data.forEach(item => {
        let row = [];
        columns.forEach(col => {
            let value = this.getNestedValue(item, col.fieldName);
            if (value && value.toString().includes(',')) {
                value = `"${value}"`;
            }
            row.push(value ? value.toString() : ''); // Handle undefined/null values
        });
        result += row.join(columnDelimiter);
        result += lineDelimiter;
    });
    return result;
}

   handleRowAction(event) {
    const actionName = event.detail.action.title; 
    const row = event.detail.row;  // Get the row data
    // RT 10-11-24 Defect changes Setting selectedcode to the RDA_Authorization_Code__c for dynamicaly display and changed the actionName 
    this.selectedCode = row.RDA_Authorization_Code__c;
    if (actionName === 'Reverse') {
        this.reverseRDA(row.Id);  
        this.currentCaseId= row.Id;
    }
}

reverseRDA(selectedId){
    if(this.accountId){
        this.isLoading = true;
        getLatestCaseAndShippingTracking({ 
            accountId : this.accountId,
            caseId : selectedId
         })
        .then(result => {
         this.isLoading = false;
            this.latestCase = result.currentCase;
            this.shippingTrackingRecords = result.shippingTrackingRecords;
            // Check the status of the shipping tracking record
            if (result.hasAcceptedStatus) {
                this.showToast(
                    "Error",
                    "RDA is associated with an Accepted shipment record and cannot be reversed.  Please call the Macitentan-Containing Products REMS Coordinating Center at 1-888-572-2934 if you have any questions",
                    "Error"
                  );
            } else {
                this.openModel();
            }
        })
        .catch(error => {
           this.isLoading = false;
            this.showToast(
                "Error",
                error.body.message,
                "Error"
              );
        });
    }
}

handleYes(){
    if(this.currentCaseId){
        this.isLoading = true;
        this.openRDAModel = false;
        createReverseRDA({accId: this.accountId, caseId: this.currentCaseId, userAccId: this.currentUser.AccountId})
        .then((result)=>{
            if(result){
                let newReverseRDACase = result;
                if(newReverseRDACase.Id){
                    this.showToast(
                        "Success",
                        "RDA Reversal Case Created Successfully",
                        "Success"
                 );
                this.fetchCases();
            }
        }
        })
        .catch((error)=> {
            this.openRDAModel = false;
            this.showToast(
                "Error",
                error.body.message,
                "Error"
              );
        })
        .finally(() => {
            this.isLoading = false;  // Hide the spinner once the Apex call is done
        });
    }
    
}
closeModel(){
    this.openRDAModel = false;
}
openModel(){
    this.openRDAModel = true;
}
showToast(title, message, variant) {
    const event = new ShowToastEvent({
      title: title,
      message: message,
      variant: variant
    });
    this.dispatchEvent(event);
}
}