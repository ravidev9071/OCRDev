/**************************************************************************
    * Name :   MaciPortalCustomController_Test
    
    Modification Log:
    ----------------------------------------------------------------------------------
    Developer               Date                   Description
    -----------------------------------------------------------------------------------
    Thandavakrishna Dindu  30/11/2022             Initial Version
    *********************************************************************************/

    @isTest
    public class SYN_PortalEnrollmentControllerTest {
        
        @isTest
        public static void createPrescriberEnrollment_MaciPortal_Test() {
             // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
            
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Prescriber');
            }
            
            system.runAs(usr){
            
                // Covering code coverage for MaciPortalCustomController method
                User u = SYN_PortalEnrollmentController.getCurrentUserType();
                System.Assert(U != null);
                
                // Covering code coverage for getCurrentUserAccountInfo method 
                Account acct = SYN_PortalEnrollmentController.getCurrentUserAccountInfo();
                System.Assert(acct != null);
                
                // Covering code coverage for reSendConfimarionEmail method
               SYN_PortalEnrollmentController.prescriberEnrollment(acc,'Signed','test');
                
                // Covering code coverage for getOCAssociatedPrescriberList method
               SYN_PortalEnrollmentController.getOCAssociatedPrescriberList(acc);
                
                // covering code coverage for getPrescriberAssociatedOCList method
               SYN_PortalEnrollmentController.getPrescriberAssociatedOCList();
                
                // covering code for calculateAge method
               SYN_PortalEnrollmentController.calculateAge(Date.today());
               
            }
               
            Test.StopTest();
        
        }
    
         @isTest
        public static void createOfficeContactEnrollment_MaciPortal_Test() {
             // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }        
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
            
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Office Contact');
            }
            
            system.runAs(usr){
            
                // Covering code coverage for MaciPortalCustomController method
                User u = SYN_PortalEnrollmentController.getCurrentUserType();
                System.Assert(U != null);
                
                // Covering code coverage for getCurrentUserAccountInfo method 
                Account acct = SYN_PortalEnrollmentController.getCurrentUserAccountInfo();
                System.Assert(acct != null);
                
                // Covering code coverage for reSendConfimarionEmail method
               SYN_PortalEnrollmentController.prescriberEnrollment(acc,'Signed','test');
                
                // Covering code coverage for getOCAssociatedPrescriberList method
               SYN_PortalEnrollmentController.getOCAssociatedPrescriberList(acc);
                
                // covering code coverage for getPrescriberAssociatedOCList method
               SYN_PortalEnrollmentController.getPrescriberAssociatedOCList();
                
                // covering code for calculateAge method
               SYN_PortalEnrollmentController.calculateAge(Date.today());
                
               SYN_PortalEnrollmentController.updateInPatientAuthorizedRepresentativeInfoOnAccount(acc);
               
                        // Creating Rems Program
            US_WSREMS__REMS_Program__c programObjs = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
                
                SYN_PortalEnrollmentController.getAllPatients(programObjs.Id,acc);
            }
               
            Test.StopTest();
        
        }
       
        
        @isTest
        public static void createPharmacyAccountAndPharmacyenrollment_MaciPortalTest() {
            
            Id RecordTypeIdPhPa = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Pharmacy Participant').getRecordTypeId();
            Id pharmCOutPatCaseRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('SYN_Outpatient_Pharmacy').getRecordTypeId();
            Id pharmCAccCaseRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Pharmacy_Account').getRecordTypeId();
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            
            Test.StartTest();
            
            System.runAs (communitydefaulowner) {
            
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPharmacyParticipantAccountTest(programObj.Id,RecordTypeIdPhPa);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Pharmacy');
            }
            
            system.runAs(usr){
            
                // Covering code coverage for MaciPortalCustomController method
                User u = SYN_PortalEnrollmentController.getCurrentUserType();
                System.Assert(U != null);
                
                // Covering code coverage for getCurrentUserAccountInfo method 
                Account acct = SYN_PortalEnrollmentController.getCurrentUserAccountInfo();
                System.Assert(acct != null);
                //Case pharmcCase = SYN_PortalEnrollmentController.createOutPatientPharmacyInfoObj(Id programObjId,Id recordTypeId, String ProgramName);
                //Case pharmcCase = SYN_TestDataUtility.createPharmacyEnrollmentCaseInfo(programObj.Id,pharmCAccCaseRecTypeId,programObj.Name);
                 Case pharmcCase = New Case(RecordTypeId = pharmCAccCaseRecTypeId,US_WSREMS__NPI__c = '5454545656', US_WSREMS__Name__c ='Test PharmC',
                                           US_WSREMS__Program_Picklist__c = 'Macitentan REMS',US_WSREMS__Channel__c='Portal',
                                           US_WSREMS__REMS_Program__c = programObj.Id,Pharmacy_Type__c = 'Outpatient',US_WSREMS__Address_Line_1__c = 'Add1',
                                          US_WSREMS__City__c = 'NY',US_WSREMS__State__c='AL',US_WSREMS__REMS_Zip_Code__c='10004',US_WSREMS__Phone__c='9998888888',
                                          US_WSREMS__Fax__c='9998887777');
                // Covering code coverage for reSendConfimarionEmail method
               //SYN_PortalEnrollmentController.prescriberEnrollment(acc,'Signed','test');
               Test.setMock(HttpCalloutMock.class, new API_ResponseMock());
                SYN_PortalEnrollmentController.pharmacyAccountCreationAndEnrollment('SYN_Outpatient_Pharmacy',pharmcCase,acc,'Signed', 'test');
                          // covering code for getCaseRecord method
              // SYN_PortalEnrollmentController.getCaseRecord(pharmcCase.id);
               SYN_PortalEnrollmentController.createPatientReEnrollment(pharmcCase,programObj.Id);
            }
               
            Test.StopTest();
        
        }
        
       @isTest
        public static void createPatientEnrollment_MaciPortal_Test() {
             // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
            
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Prescriber');
          
                Case patientCase = SYN_TestDataUtility.createPatientEnrollmentCase(programObj.id,'Macitentan REMS');
            
                // Covering code coverage for MaciPortalCustomController method
                String recordId= SYN_PortalEnrollmentController.patientEnrollment(patientCase,patientCase,acc,acc.US_WSREMS__NPI__c,false);
                Map<String,String> stateMap = SYN_PortalEnrollmentController.getStates();
                System.Assert(!stateMap.isEmpty());
                String tempId=SYN_TestDataUtility.createEmailTemplate('subject','Body','text');
                EmailTemplate temp=[SELECT Id,Name,DeveloperName,Subject,Description,HtmlValue,Body FROM EmailTemplate WHERE Id =:tempId];
    
                SYN_PortalEnrollmentController.getCaseDetails(patientCase.id);
                SYN_PortalEnrollmentController.getAllPatients(programObj.id,acc);
                 SYN_PortalEnrollmentController.sendEmailToPresciberForSignature(patientCase.id,temp.name,'Patient');
                // SYN_PortalEnrollmentController.getSelectedPatientInfo('Macitentan REMS', acc.Id, acc);
            }
               
            Test.StopTest();
        
        }
        
        @isTest
        public static void createPatientEnrollment_ManagePatientTest() {
             // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            Case patietnEnrollmentCase;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
            
                // Create Prescriber Account
                Test.setMock(HttpCalloutMock.class, new API_ResponseMock()); 
                prescriberAccount= SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                id recordTypeIdPatient = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Patient').getRecordTypeId();
                patientAccount = SYN_TestDataUtility.createPatientAccountTest(programObj.Id,recordTypeIdPatient);
                
                patietnEnrollmentCase = SYN_TestDataUtility.createNewPatientEnrollmentCase(programObj.Id,'Macitentan REMS',prescriberAccount,patientAccount);
                
                List<Case> caselst = SYN_PortalEnrollmentController.getPatients(programObj.id,prescriberAccount);
                System.Assert(!caselst.isEmpty());
               
            }
               
            Test.StopTest();
        
        }
        
        @isTest
        public static void createPatientPregancyRecords_Test() {
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            id recordTypeIdPrescriber = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Prescriber').getRecordTypeId();
            id recordTypeIdPatient = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Patient').getRecordTypeId();
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
                
                // Create Prescriber and patient Account
                
                prescriberAccount= SYN_TestDataUtility.createPrescriberAccountWithNPI(programObj.id,recordTypeIdPrescriber);
                patientAccount = SYN_TestDataUtility.createPatientAccountTest(programObj.Id,recordTypeIdPatient);
                
               // String remsId =SYN_PortalEnrollmentController.createPatientPregancyRecords(programObj.id,patientAccount.id,prescriberAccount,programObj.Name,'Portal');
               // System.Assert(remsId != null);
                
            }
            
            Test.StopTest();
            
        }
        
        @isTest
        public static void attachPrescriberEnrollmentFormonAccount_Test() {
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            id recordTypeIdPrescriber = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Prescriber').getRecordTypeId();
            id recordTypeIdPatient = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Patient').getRecordTypeId();
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
                
                // Create Prescriber Account
                
                prescriberAccount= SYN_TestDataUtility.createPrescriberAccountWithNPI(programObj.id,recordTypeIdPrescriber);
                
                String attachId =SYN_PortalEnrollmentController.attachPrescriberEnrollmentFormonAccount(prescriberAccount);
                System.Assert(attachId != null);
            }
            Test.StopTest();
        }
        
        @isTest
        public static void attachInpatientEnrollmentFormonAccount_Test() {
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            id recordTypeIdPharmacy = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Inpatient Pharmacy').getRecordTypeId();
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
                
                // Create Inpatient case
                
                case inpatientPharmacyCase= SYN_TestDataUtility.createOutPatientPharmacyInfoObj(programObj.id,recordTypeIdPharmacy,programObj.Name);
                
                String attachId =SYN_PortalEnrollmentController.attachInpatientEnrollmentFormonAccount(inpatientPharmacyCase);
                System.Assert(attachId != null);
            }
            Test.StopTest();
        }
        
        @isTest
        public static void attachOutpatientEnrollmentFormonAccount_Test() {
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            id recordTypeIdPharmacy = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Outpatient Pharmacy').getRecordTypeId();
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
                
                // Create Outpatient case
                
                case outpatientPharmacyCase= SYN_TestDataUtility.createOutPatientPharmacyInfoObj(programObj.id,recordTypeIdPharmacy,programObj.Name);
                
                String attachId =SYN_PortalEnrollmentController.attachOutpatientEnrollmentFormonAccount(outpatientPharmacyCase);
                System.Assert(attachId != null);
            }
            Test.StopTest();
        }
        
        @isTest
        public static void createChangeReproductiveStatusRecord_Test() {
            // Create admin user with Systm admin profile and role 
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            Map<String,Id> caseRecordTypeMap = REMSUtility.retrieveRecTypeDeveloperNameId_Product('Case');
           
            id caseRecordTypeId=caseRecordTypeMap.get('Change_in_Reproductive_Potential_Status_and_Pre_pubertal_Annual_Verification');
            id recordTypeIdPrescriber = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Prescriber').getRecordTypeId();
            id recordTypeIdPatient = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Patient').getRecordTypeId();
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account prescriberAccount;
            Account patientAccount;
            case prescriberCase;
            Test.StartTest();
            System.runAs (communitydefaulowner) {
                
                // Create Prescriber and patient Account
                
                prescriberAccount= SYN_TestDataUtility.createPrescriberAccountWithNPI(programObj.id,recordTypeIdPrescriber);
                patientAccount = SYN_TestDataUtility.createPatientAccountTest(programObj.Id,recordTypeIdPatient);
                prescriberCase =SYN_TestDataUtility.createChangeReproductiveCase(caseRecordTypeId,programObj.Id, prescriberAccount,patientAccount);
                String remsId =SYN_PortalEnrollmentController.createChangeReproductiveStatusRecord(programObj.id,patientAccount.id,prescriberAccount,programObj.Name,'Portal',prescriberCase);
                System.Assert(remsId != null);
                   // Covering code coverage for getProfessionalDesignationmethod
                    Map<String,String> profDegMap = SYN_PortalEnrollmentController.getProfessionalDesignation();  
                    System.Assert(!profDegMap.isEmpty());
                
                // Covering code coverage for getPharmacyCredentailsmethod
                    Map<String,String> credentailsValues = SYN_PortalEnrollmentController.getPharmacyCredentails();  
                    System.Assert(!credentailsValues.isEmpty());
                
                 // Covering code coverage for getPharmacyTitlemethod
                    Map<String,String> titleValues  = SYN_PortalEnrollmentController.getPharmacyTitle();  
                    System.Assert(!titleValues .isEmpty());
                
                // Covering code coverage for getDisEnrollmentReasonmethod
                    Map<String,String> disenrollmentValues  = SYN_PortalEnrollmentController.getDisEnrollmentReason();  
                    System.Assert(!disenrollmentValues .isEmpty());
                
                // Covering Code Coverage for updateAuthorizedRepAccount
                SYN_PortalEnrollmentController.updateAuthorizedRepAccount(prescriberAccount.id);
                
                 // Covering Code Coverage for getPatientPregnancyInfo
                SYN_PortalEnrollmentController.getPatientPregnancyInfo(programObj.name,patientAccount.id);
                
                // Covering Code Coverage for patientDisEnrollment
                SYN_PortalEnrollmentController.patientDisEnrollment(prescriberCase);
                
            }
            
            Test.StopTest(); 
        }
        @isTest
         public static void getOCAssociatedPrescriberList_Test() {
            id recordTypeIdPrescriber = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Prescriber').getRecordTypeId();
             id recordTypeIdOC = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Office_Contact').getRecordTypeId();
             id recordTypeIdPatient =SYN_CommonUtility.getRecordTypeIdbyDeveloperName('Account', 'Patient');
             id PrecRecordTypeId = Schema.SObjectType.case.getRecordTypeInfosByDeveloperName().get('Prescriber_enrollment').getRecordTypeId();
            id ofAffRecordTypeId = Schema.SObjectType.US_WSREMS__Affiliation__c.getRecordTypeInfosByDeveloperName().get('Office_Contact_Affiliation').getRecordTypeId();
           
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
        //     // Profile Query for Inserting community user 
           Test.startTest();
             // Account Creation
            Account officeContact = SYN_TestDataUtility.createAccount(programObj.Id,recordTypeIdOC, 'TestAccount','Office');
            Account createPatientAccount= SYN_TestDataUtility.createPatientAccount(programObj.Id,recordTypeIdPatient);
             Account prescAcc1 = SYN_TestDataUtility.createPrescriberAccountWithNPI(programObj.Id,recordTypeIdPrescriber);
             //Rems Service Creation
             US_WSREMS__REMS_Service_Summary__c objService = SYN_TestDataUtility.createRemsServiceSummaryopen(createPatientAccount.Id,programObj.Id);
            //Enrollment Service creation  
             Case createPrescriberEnrollmentCase1= SYN_TestDataUtility.createaPrescriberEnrollmentCase(PrecRecordTypeId,'Test FirstName','Test LastName','Complete', programObj.Id,prescAcc1); 
             US_WSREMS__Affiliation__c affiliationRecord = new US_WSREMS__Affiliation__c(
                 US_WSREMS__Prescriber__c = prescAcc1.Id,
                 Office_Contact__c =officeContact.Id,
                 US_WSREMS__REMSProgram__c= programObj.Id,
                 RecordTypeId=ofAffRecordTypeId,
                US_WSREMS__isActive__c = true);
            try {
                 insert affiliationRecord;
             } catch(Exception expObj) {
                system.debug('Exception');
             }
            
             SYN_PortalEnrollmentController.getOCAssociatedPrescriberList(officeContact) ;
            Test.StopTest();    
         }
        
        @isTest
        public static void miscTest() {
            
            String t = '';
            id recordTypeIdPrescriber = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Prescriber').getRecordTypeId();
            id recordTypeIdOC = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Office_Contact').getRecordTypeId();
            id recordTypeIdPatient =SYN_CommonUtility.getRecordTypeIdbyDeveloperName('Account', 'Patient');
            id PrecRecordTypeId = Schema.SObjectType.case.getRecordTypeInfosByDeveloperName().get('Prescriber_enrollment').getRecordTypeId();
            id ofAffRecordTypeId = Schema.SObjectType.US_WSREMS__Affiliation__c.getRecordTypeInfosByDeveloperName().get('Office_Contact_Affiliation').getRecordTypeId();
           
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            // Account Creation
            Account officeContact = SYN_TestDataUtility.createAccount(programObj.Id,recordTypeIdOC, 'TestAccount','Office');
            Account createPatientAccount= SYN_TestDataUtility.createPatientAccount(programObj.Id,recordTypeIdPatient);
             Account prescAcc1 = SYN_TestDataUtility.createPrescriberAccountWithNPI(programObj.Id,recordTypeIdPrescriber);
            
            Test.startTest();
            SYN_PortalEnrollmentController.SavePrescriberSignature(prescAcc1.Id,'',t);
            SYN_PortalEnrollmentController.getCurrentUserPharmacyInfo(userInfo.getUserId());
            
            Test.StopTest();  
            
        }
    
        @IsTest
        static void SavePrescriberSignatureTest(){
            
            try {
                Test.startTest();
                SYN_PortalEnrollmentController.SavePrescriberSignature(null,'','');
                Test.stopTest();
            } catch (Exception expObj) {
                system.debug('Exception');
            }  
        }
        
        
         @IsTest() 
        static void getRelatedFilesByRecordTest() {
            
            Map<ID,ContentDistribution> mapContentDistribution=new Map<ID, ContentDistribution>();
            
            US_WSREMS__REMS_Program__c programObj =new US_WSREMS__REMS_Program__c();
            programObj.Name='Test0001';
            insert programObj;   
            
            Id idRTforParticipantFile =Schema.SObjectType.REMS_Participant_Files__c.getRecordTypeInfosByDeveloperName().get('Prescriber').getRecordTypeId();
            
            REMS_Participant_Files__c remsParticipantFileobj = new REMS_Participant_Files__c();
            remsParticipantFileobj.Name ='Test Participant';  
            remsParticipantFileobj.RecordTypeId=idRTforParticipantFile;
            remsParticipantFileobj.Portal_Role__c='Prescriber';
            remsParticipantFileobj.REMS_Program__c=programObj.id;
            insert remsParticipantFileobj;
            
            ContentVersion contentVersionObj=new Contentversion();
            contentVersionObj.title='ABC';
            contentVersionObj.PathOnClient ='test';
            Blob b=Blob.valueOf('Unit Test Attachment Body');
            contentVersionObj.versiondata=EncodingUtil.base64Decode('Unit Test Attachment Body');
            insert contentVersionObj;
            
            ContentDocumentLink contentlinkObj=new ContentDocumentLink();
            contentlinkObj.LinkedEntityId=remsParticipantFileobj.id;
            contentlinkObj.contentdocumentid=[select contentdocumentid from contentversion where id =: contentVersionObj.id].contentdocumentid;
            contentlinkObj.ShareType = 'I';
            contentlinkObj.Visibility = 'AllUsers';         
            insert contentlinkObj;
            
            ContentDocumentLink contentDocumentList = [select contentdocument.id, contentdocument.title, contentdocument.filetype from contentdocumentlink 
                                                      where linkedentityid =:remsParticipantFileobj.id];
            ContentVersion cver = [select id from contentversion where contentdocumentid = :contentDocumentList.contentdocument.id];
            ContentDistribution contentDocumentObj = new ContentDistribution();
            contentDocumentObj.Name = 'Test';
            contentDocumentObj.ContentVersionId = cver.id;
            contentDocumentObj.PreferencesAllowViewInBrowser= true;
            contentDocumentObj.PreferencesLinkLatestVersion=true;
            contentDocumentObj.PreferencesNotifyOnVisit=false;
            contentDocumentObj.PreferencesPasswordRequired=false;
            contentDocumentObj.PreferencesAllowOriginalDownload= true;
            insert contentDocumentObj;
            
            List<REMS_Participant_Files__c> participantList = [SELECT Id,RecordType.DeveloperName,Portal_Role__c,REMS_Program__c FROM REMS_Participant_Files__c
                                                               WHERE RecordType.DeveloperName = 'Prescriber' LIMIT 1];
            
            
            Test.startTest();
            SYN_PortalEnrollmentController.getRelatedFilesByRecordId(participantList[0].RecordType.DeveloperName,
                                                                                         remsParticipantFileobj.REMS_Program__c, remsParticipantFileobj.Portal_Role__c);
           
            Test.stopTest();
            
        }
    
        @IsTest
        static void getOfficeContactAccountInfoTest(){
    
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            Id pharmCAccCaseRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Pharmacy_Account').getRecordTypeId();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            String t = '';
    
            
            
            Test.startTest();
            
            System.runAs (communitydefaulowner) {
                
    
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Inpatient Pharmacy');
                
            }
    
            system.runAs(usr) {
                SYN_PortalEnrollmentController.getOfficeContactAccountInfo();
                SYN_PortalEnrollmentController.getPharmacyARInfo();
                SYN_PortalEnrollmentController.verifyUserResetPasswrod();
                SYN_PortalEnrollmentController.updatePharmacyPreference(acc, programObj.Id , 'Macitentan REMS', 'Portal');
                SYN_PortalEnrollmentController.updateIsResetPassword(usr.Id);
                SYN_PortalEnrollmentController.getActivePage();
                SYN_PortalEnrollmentController.createPatientPregnancyREMSService('Enrollment', acc.Id, programObj.Id, '',null);
    
                Case patientCase = SYN_TestDataUtility.createPatientEnrollmentCase(programObj.id,'Macitentan REMS');
                Case pharmcCase = SYN_TestDataUtility.createPharmacyEnrollmentCaseInfo(programObj.Id,pharmCAccCaseRecTypeId,programObj.Name);
                SYN_PortalEnrollmentController.savePrescriberAccountInfo(patientCase, programObj.Id , 'Macitentan REMS', 'Portal');
    
                
                
                
                try {
                    SYN_PortalEnrollmentController.getPrescriberAndPatientPregnancyInfo(programObj.Id,'');
                }catch(Exception expObj) {
                    system.debug('error');
                }
            }
    
            Test.stopTest();
            
        }
    
        @IsTest
        static void createPatientPregancyRecordsTest(){
            
            Test.startTest();
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            Account acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
            try {
                    SYN_PortalEnrollmentController.createPatientPregancyRecords(programObj.Id, '',acc,'Macitentan REMS', 'Portal');
                }catch(Exception expObj) {
                    system.debug('error');
                }
            Test.stopTest();
            
        }
    
         @IsTest
        static void updatePharmacyParticipantAffiliationTest(){
            
            Test.startTest();
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            Account acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
            try {
                    SYN_PortalEnrollmentController.updatePharmacyParticipantAffiliation(acc, acc.Id);
                }catch(Exception expObj) {
                    system.debug('error');
                }
            Test.stopTest();
            
        }
    
     
    
        @IsTest
        static void getPharmacyEnrollmentInfoTest(){
            
    
            Test.startTest();
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            Account acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
            Case patientCase = SYN_TestDataUtility.createPatientEnrollmentCase(programObj.id,'Macitentan REMS');
            try {
                    SYN_PortalEnrollmentController.getPharmacyEnrollmentInfo('',patientCase, acc, acc.Id);
                }catch(Exception expObj) {
                    system.debug('error');
                }
            Test.stopTest();
            
        }
    
        @IsTest
        static void insertPharmacyInfoTest(){
    
            User communitydefaulowner = SYN_TestDataUtility.communitydefaultUser();
            Id pharmCAccCaseRecTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Pharmacy_Account').getRecordTypeId();
            System.runAs ( new User(Id = UserInfo.getUserId()) ) {
                insert communitydefaulowner;
            }
            
            // Creating Rems Program
            US_WSREMS__REMS_Program__c programObj = SYN_TestDataUtility.createProgram('Macitentan REMS','Active');
            // Profile Query for Inserting community user 
            Profile prf = [SELECT Id,Name FROM Profile WHERE UserType ='PowerCustomerSuccess' limit 1];
            User usr;
            Account acc;
            String t = '';
    
            
            
            Test.startTest();
            
            System.runAs (communitydefaulowner) {
                
    
                // Create Prescriber Account
                acc = SYN_TestDataUtility.createPrescriberPersonAccount(programObj.id);
                
                // Create a protal user 
                usr = SYN_TestDataUtility.CreateCommunityUser(acc,prf.id,programObj.Name,'Inpatient Pharmacy');
                
            }
    
            system.runAs(usr) {
                Case patientCase = SYN_TestDataUtility.createPatientEnrollmentCase(programObj.id,'Macitentan REMS');
                Case pharmcCase = SYN_TestDataUtility.createPharmacyEnrollmentCaseInfo(programObj.Id,pharmCAccCaseRecTypeId,programObj.Name);
                SYN_PortalEnrollmentController.saveOfficeContactAccountCaseInfo(patientCase, programObj.Id , 'Macitentan REMS', 'Portal');
                SYN_PortalEnrollmentController.getUserDefaultPharmacyInfo(UserInfo.getUserId());
                SYN_PortalEnrollmentController.saveSignatureAttachment(acc,'Closed', t, null);   
                
                SYN_PortalEnrollmentController.insertPharmacyEnrollmentCase(pharmcCase,patientCase, acc.Id ,'Closed', t);
    
                SYN_PortalEnrollmentController.insertPharmacyInfo('Enrollment',pharmcCase,acc);
                SYN_PortalEnrollmentController.insertPharmacyInfo('Enrollment',pharmcCase,acc);
            }
    
            Test.stopTest();
            
        }
       
    }